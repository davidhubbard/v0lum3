# Copyright 2016 The Chromium Authors. All rights reserved.
# Copyright 2017 David Hubbard. All rights reserved.
# Licensed under the GPL v3.

declare_args() {
  is_clang = false
  is_spirv_remap_enabled = false
}

config("glslang_config") {
  include_dirs = [
    "."
  ]

  defines = []
  if (is_linux || is_android) {
    defines += [ "GLSLANG_OSINCLUDE_UNIX" ]
  } else if (is_win) {
    defines += [ "GLSLANG_OSINCLUDE_WIN32" ]
  } else {
    assert(false, "Unsupported platform.")
  }
}

config("glslang_local_config") {
  cflags = [
    "-Wno-missing-field-initializers",
    "-Wno-ignored-qualifiers",
  ]
  if (is_clang) {
    cflags += [
      "-Wno-tautological-constant-out-of-range-compare",
      "-Wno-reorder",
      "-Wno-sign-compare",
      "-Wno-unused-variable",
    ]
  }
}

static_library("OGLCompiler") {
  sources = [
    "OGLCompilersDLL/InitializeDll.cpp",
    "OGLCompilersDLL/InitializeDll.h",
  ]

  all_dependent_configs = [ ":glslang_config" ]
  configs += [ ":glslang_local_config" ]
}

static_library("SPIRV") {
  sources = [
    "SPIRV/GLSL.std.450.h",
    "SPIRV/GlslangToSpv.cpp",
    "SPIRV/GlslangToSpv.h",
    "SPIRV/InReadableOrder.cpp",
    "SPIRV/Logger.cpp",
    "SPIRV/Logger.h",
    "SPIRV/SPVRemapper.cpp",
    "SPIRV/SPVRemapper.h",
    "SPIRV/SpvBuilder.cpp",
    "SPIRV/SpvBuilder.h",
    "SPIRV/disassemble.cpp",
    "SPIRV/disassemble.h",
    "SPIRV/doc.cpp",
    "SPIRV/doc.h",
    "SPIRV/spirv.hpp",
    "SPIRV/spvIR.h",
  ]

  all_dependent_configs = [ ":glslang_config" ]
  configs += [ ":glslang_local_config" ]
}

static_library("glslang-default-resource-limits") {
  sources = [
    "StandAlone/ResourceLimits.cpp",
  ]

  all_dependent_configs = [ ":glslang_config" ]
  configs += [ ":glslang_local_config" ]
}

static_library("glslang") {
  sources = [
    "glslang/GenericCodeGen/CodeGen.cpp",
    "glslang/GenericCodeGen/Link.cpp",
    "glslang/Include/BaseTypes.h",
    "glslang/Include/Common.h",
    "glslang/Include/ConstantUnion.h",
    "glslang/Include/InfoSink.h",
    "glslang/Include/InitializeGlobals.h",
    "glslang/Include/PoolAlloc.h",
    "glslang/Include/ResourceLimits.h",
    "glslang/Include/ShHandle.h",
    "glslang/Include/Types.h",
    "glslang/Include/arrays.h",
    "glslang/Include/intermediate.h",
    "glslang/Include/revision.h",
    "glslang/MachineIndependent/Constant.cpp",
    "glslang/MachineIndependent/InfoSink.cpp",
    "glslang/MachineIndependent/Initialize.cpp",
    "glslang/MachineIndependent/Initialize.h",
    "glslang/MachineIndependent/IntermTraverse.cpp",
    "glslang/MachineIndependent/Intermediate.cpp",
    "glslang/MachineIndependent/ParseContextBase.cpp",
    "glslang/MachineIndependent/ParseHelper.cpp",
    "glslang/MachineIndependent/ParseHelper.h",
    "glslang/MachineIndependent/PoolAlloc.cpp",
    "glslang/MachineIndependent/RemoveTree.cpp",
    "glslang/MachineIndependent/RemoveTree.h",
    "glslang/MachineIndependent/Scan.cpp",
    "glslang/MachineIndependent/Scan.h",
    "glslang/MachineIndependent/ScanContext.h",
    "glslang/MachineIndependent/ShaderLang.cpp",
    "glslang/MachineIndependent/SymbolTable.cpp",
    "glslang/MachineIndependent/SymbolTable.h",
    "glslang/MachineIndependent/Versions.cpp",
    "glslang/MachineIndependent/Versions.h",
    "glslang/MachineIndependent/gl_types.h",
    "glslang/MachineIndependent/glslang.y",
    "glslang/MachineIndependent/glslang_tab.cpp",
    "glslang/MachineIndependent/glslang_tab.cpp.h",
    "glslang/MachineIndependent/iomapper.cpp",
    "glslang/MachineIndependent/intermOut.cpp",
    "glslang/MachineIndependent/limits.cpp",
    "glslang/MachineIndependent/linkValidate.cpp",
    "glslang/MachineIndependent/localintermediate.h",
    "glslang/MachineIndependent/parseConst.cpp",
    "glslang/MachineIndependent/parseVersions.h",
    "glslang/MachineIndependent/preprocessor/Pp.cpp",
    "glslang/MachineIndependent/preprocessor/PpAtom.cpp",
    "glslang/MachineIndependent/preprocessor/PpContext.cpp",
    "glslang/MachineIndependent/preprocessor/PpContext.h",
    "glslang/MachineIndependent/preprocessor/PpMemory.cpp",
    "glslang/MachineIndependent/preprocessor/PpScanner.cpp",
    "glslang/MachineIndependent/preprocessor/PpSymbols.cpp",
    "glslang/MachineIndependent/preprocessor/PpTokens.cpp",
    "glslang/MachineIndependent/preprocessor/PpTokens.h",
    "glslang/MachineIndependent/propagateNoContraction.cpp",
    "glslang/MachineIndependent/propagateNoContraction.h",
    "glslang/MachineIndependent/reflection.cpp",
    "glslang/MachineIndependent/reflection.h",
    "glslang/Public/ShaderLang.h",
  ]

  if (is_linux || is_android) {
    sources += [ "glslang/OSDependent/Unix/ossource.cpp" ]
  } else if (is_win) {
    sources += [
      "glslang/OSDependent/Windows/main.cpp",
      "glslang/OSDependent/Windows/ossource.cpp",
    ]
  } else {
    assert(false, "Unsupported platform.")
  }

  all_dependent_configs = [ ":glslang_config" ]
  configs += [ ":glslang_local_config" ]
}

static_library("HLSL") {
  sources = [
    "hlsl/hlslGrammar.cpp",
    "hlsl/hlslGrammar.h",
    "hlsl/hlslOpMap.cpp",
    "hlsl/hlslOpMap.h",
    "hlsl/hlslParseHelper.cpp",
    "hlsl/hlslParseHelper.h",
    "hlsl/hlslScanContext.cpp",
    "hlsl/hlslScanContext.h",
    "hlsl/hlslTokenStream.cpp",
    "hlsl/hlslTokenStream.h",
    "hlsl/hlslTokens.h",
  ]

  all_dependent_configs = [ ":glslang_config" ]
  configs += [ ":glslang_local_config" ]
}

executable("glslangValidator") {
  sources = [ "StandAlone/StandAlone.cpp" ]

  deps = [
    ":glslang",
    ":SPIRV",
    ":OGLCompiler",
    ":HLSL",
    ":glslang-default-resource-limits",
  ]

  configs += [
    ":glslang_local_config",
    ":glslang_config",
  ]
}

if (is_spirv_remap_enabled) {
  executable("spirv-remap") {
    sources = [ "StandAlone/spirv-remap.cpp" ]

    deps = [
      ":glslang",
      ":SPIRV",
      ":glslang-default-resource-limits",
    ]

    configs += [
      ":glslang_local_config",
      ":glslang_config",
    ]
  }
}
